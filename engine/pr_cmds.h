#ifndef ENGINE_PR_CMDS_H
#define ENGINE_PR_CMDS_H

#include "tier0/platform.h"

void SeedRandomNumberGenerator();

float RandomFloat( float flLow, float flHigh );
int32 RandomLong( int32 lLow, int32 lHigh );

int hudCheckParm( char* parm, char** ppnext );

mnode_t* PVSNode(mnode_t *node, vec_t *emins, vec_t *emaxs);
int PF_precache_generic_I(const char *s);
void SV_SetGlobalTrace(trace_t *ptrace);
int PF_IsDedicatedServer(void);
const char* TraceTexture(edict_t *pTextureEntity, const float *v1, const float *v2);
void EV_SV_Playback(int flags, int clientindex, unsigned short eventindex, float delay, float *origin, float *angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2);
void SetMinMaxSize(edict_t *e, const float *min, const float *max, qboolean rotate);
void PVSMark(model_t *pmodel, unsigned char *ppvs);
int PF_precache_model_I(char* s);
qboolean PR_IsEmptyString(char* s);
int PF_precache_sound_I(char* s);
void PF_setmodel_I(edict_t* e, const char* m);
int PF_precache_generic_I(char* s);
int PF_modelindex(const char* pstr);
int ModelFrames(int modelIndex);
void PF_setsize_I(edict_t* e, const float* rgflMin, const float* rgflMax);
void PF_changelevel_I(char* s1, char* s2);
void PF_setspawnparms_I(edict_t* ent);
float PF_vectoyaw_I(const float* rgflVector);
void PF_vectoangles_I(const float* rgflVectorIn, float* rgflVectorOut);
void PF_changeyaw_I(edict_t* ent);
void PF_changepitch_I(edict_t* ent);
int iGetIndex(const char* pszField);
edict_t* PF_find_Shared(int eStartSearchAfter, int iFieldToMatch, const char* szValueToFind);
edict_t* FindEntityByString(edict_t* pEdictStartSearchAfter, const char* pszField, const char* pszValue);
int GetEntityIllum(edict_t* pEnt);
edict_t* FindEntityInSphere(edict_t* pEdictStartSearchAfter, const float* org, float rad);
int PF_newcheckclient(int check);
edict_t* PF_checkclient_I(edict_t* pEdict);
edict_t* PVSFindEntities(edict_t* pplayer);
void PF_makevectors_I(const float* rgflVector);
edict_t* PF_Spawn_I(void);
void PF_Remove_I(edict_t* ed);
edict_t* CreateNamedEntity(int className);
void PF_makestatic_I(edict_t* ent);
int PF_checkbottom_I(edict_t* pEdict);
int PF_droptofloor_I(edict_t* ent);
int PF_walkmove_I(edict_t* ent, float yaw, float dist, int iMode);
void PF_setorigin_I(edict_t* e, const float* org);
void PF_sound_I(edict_t* entity, int channel, const char* sample, float volume, float attenuation, int fFlags, int pitch);
void PF_ambientsound_I(edict_t* entity, float* pos, const char* samp, float vol, float attenuation, int fFlags, int pitch);
void PF_traceline_DLL(const float* v1, const float* v2, int fNoMonsters, edict_t* pentToSkip, TraceResult* ptr);
void PF_TraceToss_DLL(edict_t* pent, edict_t* pentToIgnore, TraceResult* ptr);
void PF_TraceToss_Shared(edict_t* ent, edict_t* ignore);
int TraceMonsterHull(edict_t* pEdict, const float* v1, const float* v2, int fNoMonsters, edict_t* pentToSkip, TraceResult* ptr);
void TraceHull(const float* v1, const float* v2, int fNoMonsters, int hullNumber, edict_t* pentToSkip, TraceResult* ptr);
void TraceModel(const float* v1, const float* v2, int hullNumber, edict_t* pent, TraceResult* ptr);
void TraceSphere(const float* v1, const float* v2, int fNoMonsters, float radius, edict_t* pentToSkip, TraceResult* ptr);
void PF_aim_I(edict_t* ent, float speed, float* rgflReturn);
void PF_stuffcmd_I(edict_t* pEdict, char* szFmt, ...);
void PF_localcmd_I(char* str);
void PF_localexec_I(void);
void PF_particle_I(const float* org, const float* dir, float color, float count);
void PF_lightstyle_I(int style, char* val);
int PF_DecalIndex(const char* name);
int PF_pointcontents_I(const float* rgflVector);
void PF_MessageBegin_I(int msg_dest, int msg_type, const float* pOrigin, edict_t* ed);
sizebuf_t* WriteDest_Parm(int dest);
void PF_MessageBegin_I(int msg_dest, int msg_type, const float* pOrigin, edict_t* ed);
void PF_MessageEnd_I(void);
void PF_WriteByte_I(int iValue);
void PF_WriteChar_I(int iValue);
void PF_WriteShort_I(int iValue);
void PF_WriteLong_I(int iValue);
void PF_WriteAngle_I(float flValue);
void PF_WriteCoord_I(float flValue);
void PF_WriteString_I(const char* sz);
void PF_WriteEntity_I(int iValue);
edict_t* PEntityOfEntIndex(int iEntIndex);
void* GetModelPtr(edict_t* pEdict);
void ClientPrintf(edict_t* pEdict, PRINT_TYPE ptype, const char* szMsg);
void ServerPrint(const char* szMsg);
void PF_setview_I(const edict_t* clientent, const edict_t* viewent);
float PF_Time(void);
void PF_crosshairangle_I(const edict_t* clientent, float pitch, float yaw);
void PF_FadeVolume(const edict_t* clientent, int fadePercent, int fadeOutSeconds, int holdTime, int fadeInSeconds);
void PF_SetClientMaxspeed(const edict_t* clientent, float fNewMaxspeed);
void PF_RunPlayerMove_I(edict_t* fakeclient, const float* viewangles, float forwardmove, float sidemove, float upmove, unsigned short buttons, unsigned char impulse, unsigned char msec);
int PF_NumberOfEntities_I(void);
char* PF_GetInfoKeyBuffer_I(edict_t* e);
char* PF_InfoKeyValue_I(char* infobuffer, char* key);
void PF_SetKeyValue_I(char* infobuffer, char* key, char* value);
void PF_RemoveKey_I(char* s, const char* key);
void PF_SetClientKeyValue_I(int clientIndex, char* infobuffer, char* key, char* value);
int PF_IsMapValid_I(char* mapname);
void PF_StaticDecal(const float* origin, int decalIndex, int entityIndex, int modelIndex);
int PF_GetPlayerUserId(edict_t* e);
unsigned int PF_GetPlayerWONId(edict_t* e);
const char* PF_GetPlayerAuthId(edict_t* e);
void PF_BuildSoundMsg_I(edict_t* entity, int channel, const char* sample, float volume, float attenuation, int fFlags, int pitch, int msg_dest, int msg_type, const float* pOrigin, edict_t* ed);
const char* PF_GetPhysicsInfoString(const edict_t* pClient);
const char* PF_GetPhysicsKeyValue(const edict_t* pClient, const char* key);
void PF_SetPhysicsKeyValue(const edict_t* pClient, const char* key, const char* value);
unsigned short EV_Precache(int type, const char* psz);
void EV_Playback(int flags, const edict_t* pInvoker, unsigned short eventindex, float delay, float* origin, float* angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2);
int PF_GetCurrentPlayer(void);
int PF_CanSkipPlayer(const edict_t* pClient);
void PF_SetGroupMask(int mask, int op);
int PF_CreateInstancedBaseline(int classname, entity_state_t* baseline);
void PF_Cvar_DirectSet(cvar_t* var, char* value);
void PF_ForceUnmodified(FORCE_TYPE type, float* mins, float* maxs, const char* filename);
void PF_GetPlayerStats(const edict_t* pClient, int* ping, int* packet_loss);
void QueryClientCvarValue(const edict_t* player, const char* cvarName);
void QueryClientCvarValue2(const edict_t* player, const char* cvarName, int requestID);
void QueryClientCvarValueCmd(void);
void QueryClientCvarValueCmd2(void);
int EngCheckParm(const char* pchCmdLineToken, char** pchNextVal);
int PF_IsMapValid_I(char* mapname);

#endif //ENGINE_PR_CMDS_H
